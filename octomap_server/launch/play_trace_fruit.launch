<launch>
  <!-- see /home/leus/ros/indigo/src/start-jsk/jsk_apc/jsk_arc2017_baxter/launch/setup/include/play_rosbag.launch -->

  <!-- USAGE -->
  <!-- roslaunch euslib play_rosbag.launch filename:=$HOME/.ros/rosbag/sotsuron/hoge.bag -->

  <!-- for fetch robot -->

  <arg name="filename" value="$(find octomap_server)/rosbag/2019-03-15-apple.bag" />
  <!-- <arg name="filename" value="$(find octomap_server)/rosbag/2019-03-15-banana.bag" /> -->
  <!-- <arg name="filename" value="$(find octomap_server)/rosbag/2019-03-15-mango.bag" /> -->

  <arg name="create_manager" default="true"/>
  <arg name="manager" default="manager_for_bag"/>
  <arg name="input_occupied_grid" default="/octomap_point_cloud_centers"/>

  <param name="use_sim_time" value="true" />
  <node name="rosbag_play"
        pkg="rosbag" type="play"
        args="$(arg filename) --clock --loop --pause"/> <!-- do not loop for octomap calculation and /camera(proximity)_passthrough/request -->

  <param name="robot_description" command="$(find xacro)/xacro.py $(find fetch_description)/robots/fetch.urdf" />

  <!-- publish camera pointcloud -->
  <include file="$(find jsk_pcl_ros)/launch/openni2_remote.launch">
    <arg name="camera" value="camera_remote" />
    <arg name="local_camera" value="head_camera" />
    <arg name="rgb_camera_info_url" value="/head_camera/rgb/camera_info" />
    <arg name="depth_camera_info_url" value="/head_camera/depth/camera_info" />
    <arg name="republish" value="true" />
  </include>
  <!-- publish proximity pointcloud -->
  <node pkg="euslib" type="publish-pointcloud.l" name="pointcloud_publisher" args="&quot;(main)&quot;" output="screen" respawn="true"/>

  <!-- Do not forget to rosservice call /proximitycloud_passthrough/request -->
  <node pkg="jsk_topic_tools" type="passthrough" name="proximitycloud_passthrough">
    <remap from="~input" to="/proximity_pointcloud/all" />
    <remap from="~output" to="/proximity_in" />
    <param name="default_duration" value="86400" />
  </node>
  <!-- Do not forget to rosservice call /proximitycloud_passthrough/request -->
  <node pkg="jsk_topic_tools" type="passthrough" name="camera_passthrough">
    <remap from="~input" to="/camera_remote/depth_registered/points" />
    <remap from="~output" to="/camera_in" />
    <param name="default_duration" value="86400" />
  </node>

  <!-- octomap for bag -->
  <node pkg="jsk_pcl_ros" type="octomap_server_contact" name="octomap_server_contact"
        output="screen" >
    <param name="resolution" value="0.005" />
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="base_link" />
    <!-- <param name="frame_id" type="string" value="octomap_world" /> -->
    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="5.0" />
    <param name="publish_free_space" value="true"/>
    <param name="publish_unknown_space" value="true"/>
    <param name="publish_frontier_space" value="false"/>
    <param name="latch" value="false"/>
    <!-- data source to integrate (PointCloud2) -->
    <remap from="/cloud_in" to="camera_in" />
    <remap from="/proximity_in" to="proximity_in" />
    <!-- <remap from="/proximity_in" to="proximity_pointcloud/all" /> -->
    <remap from="/contact_sensors_in" to="contact_sensors_in" />
    <!-- Sensor Input PassThrough Filter Params -->
    <!-- for bag inside -->
    <param name="occupancy_min_x" value="0.4" />
    <param name="occupancy_max_x" value="0.6" />
    <param name="occupancy_min_y" value="-0.1" />
    <param name="occupancy_max_y" value="0.1" />
    <param name="occupancy_min_z" value="0.677" />
    <param name="occupancy_max_z" value="0.877" />

    <param name="use_vertex" value="false" /> <!-- to speedup insertContactSensor -->
    <param name="sensor_model/max" value="0.60" /> <!-- default: 0.97 -->
    <param name="sensor_model/min" value="0.45" /> <!-- default: 0.12 -->
    <param name="sensor_model/hit" value="0.95" /> <!-- default: 0.7 -->
    <param name="sensor_model/miss" value="0.15" /> <!-- default: 0.4 -->

    <rosparam command="load" file="$(find octomap_server)/config/fetch_contact_sensor_config.yaml" />
  </node>

    <!-- make tf of octomap_world, and rosservice call passthrough/request -->
  <node pkg="octomap_server" type="octomap-setup.l" name="octomap_setup" output="screen"/>

  <!-- set octomap free where pointcloud is inside of the robot -->
  <node pkg="octomap_server" type="publish_fetch_contact_sensor.py" name="publish_fetch_contact_sensor"
        >
  </node>

  <node if="$(arg create_manager)"
        pkg="nodelet" type="nodelet" name="$(arg manager)"
        args="manager" output="screen"/>

  <node name="attention_clipper_for_octomap" pkg="nodelet" type="nodelet"
        args="load jsk_pcl/AttentionClipper $(arg manager)" output="screen">
    <remap from="~input/points" to="$(arg input_occupied_grid)" />
    <rosparam>
      <!-- the target region near the gripper -->
      initial_pos: [0.01, 0, 0]
      initial_rot: [0, 0, 0]
      dimension_x: 0.06
      dimension_y: 0.09
      dimension_z: 0.09
      frame_id: gripper_link
    </rosparam>
  </node>

  <node name="extract_indices_for_octomap"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl/ExtractIndices $(arg manager)" >
    <remap from="~input" to="$(arg input_occupied_grid)" />  <!-- depth timestamp -->
    <remap from="~indices" to="attention_clipper_for_octomap/output/point_indices" />  <!-- rgb timestamp -->
    <rosparam>
      approximate_sync: true
      queue_size: 100
      keep_organized: false
    </rosparam>
  </node>

  <!-- classify fruit by using occupied octomap grid-->
  <node pkg="octomap_server" name="classify_fruit_ros" type="classify_fruit_ros.py" />

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find octomap_server)/config/trace_fruit.rviz"/>

  <node name="service_call_for_rosbag" pkg="octomap_server" type="service-call-for-rosbag.l" />
</launch>
