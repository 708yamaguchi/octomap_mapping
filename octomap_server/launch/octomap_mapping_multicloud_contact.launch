<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
  <!-- publish pointcloud with proximity and camera sensor -->
  <arg name="real_sensor" default="true"/>
  <arg name="fcn" default="true"/>
  <!-- publish pointcloud with proximity sensor -->
  <include file="$(find euslib)/launch/proximity.launch">
    <arg name="real_sensor" value="$(arg real_sensor)"/>
    <arg name="use_fetch" value="$(arg real_sensor)"/>
  </include>
  <!-- Do not forget to rosservice call /proximitycloud_passthrough/request -->
  <node pkg="jsk_topic_tools" type="passthrough" name="proximitycloud_passthrough">
    <remap from="~input" to="/proximity_pointcloud/all" />
    <remap from="~output" to="/proximity_in" />
    <param name="default_duration" value="86400" />
  </node>
  <!-- publish pointcloud with vision sensor -->
  <group if="$(arg fcn)">
    <include file="$(find bag_segmentation)/launch/fcn_bag_segmentation.launch">
      <arg name="rviz" value="false"/>
    </include>
  </group>
  <group unless="$(arg fcn)">
    <include file="$(find euslib)/launch/visualize_pointcloud_fetch.launch">
      <arg name="rviz" value="false"/>
    </include>
  </group>
  <!-- Do not forget to rosservice call /proximitycloud_passthrough/request -->
  <node pkg="jsk_topic_tools" type="passthrough" name="camera_passthrough">
    <remap from="~input" to="/camera_remote/depth_registered/points" />
    <remap from="~output" to="/camera_in" />
    <param name="default_duration" value="86400" />
  </node>

  <!-- octomap -->
  <node pkg="jsk_pcl_ros" type="octomap_server_contact" name="octomap_server_contact"
        output="screen" >
	<param name="resolution" value="0.005" />
	<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="octomap_world" />
	<!-- maximum range to integrate (speedup!) -->
	<param name="sensor_model/max_range" value="5.0" />
    <param name="publish_free_space" value="true"/>
    <param name="publish_unknown_space" value="true"/>
    <param name="latch" value="false"/>
	<!-- data source to integrate (PointCloud2) -->
	<remap from="/cloud_in" to="camera_in" />
	<remap from="/proximity_in" to="proximity_in" />
    <!-- <remap from="/proximity_in" to="proximity_pointcloud/all" /> -->
	<remap from="/contact_sensors_in" to="contact_sensors_in" />
    <!-- Sensor Input PassThrough Filter Params -->
    <!-- for bag -->
    <param name="occupancy_min_x" value="-0.3" />
    <param name="occupancy_max_x" value="0.2" />
    <param name="occupancy_min_y" value="-0.6" />
    <param name="occupancy_max_y" value="-0.1" />
    <param name="occupancy_min_z" value="0.2" />
    <param name="occupancy_max_z" value="0.8" />
    <!-- for table top -->
    <!-- <param name="occupancy_min_x" value="0.4" /> -->
    <!-- <param name="occupancy_max_x" value="0.8" /> -->
    <!-- <param name="occupancy_min_y" value="-0.25" /> -->
    <!-- <param name="occupancy_max_y" value="0.25" /> -->
    <!-- <param name="occupancy_min_z" value="0.6" /> -->
    <!-- <param name="occupancy_max_z" value="1.0" /> -->

    <param name="use_vertex" value="false" /> <!-- to speedup insertContactSensor -->
    <param name="sensor_model/max" value="0.70" /> <!-- default: 0.97 -->
    <param name="sensor_model/min" value="0.40" /> <!-- default: 0.12 -->
    <param name="sensor_model/hit" value="0.9" /> <!-- default: 0.7 -->
    <param name="sensor_model/miss" value="0.2" /> <!-- default: 0.4 -->

    <rosparam command="load" file="$(find octomap_server)/config/fetch_contact_sensor_config.yaml" />
</node>
  <!-- make tf of octomap_world, and rosservice call passthrough/request -->
  <node pkg="octomap_server" type="octomap-setup.l" name="octomap_setup"/>

  <!-- set octomap free where pointcloud is inside of the robot -->
  <node pkg="octomap_server" type="publish_fetch_contact_sensor.py" name="publish_fetch_contact_sensor" output="screen" />

  <!-- rviz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find octomap_server)/config/multicloud.rviz"/>

</launch>
